@model IEnumerable<Item>
@using ToDo.Models
<script>

    $(document).ready(function () {

        $("#itemSortable").sortable({
            placeholder: 'ui-state-highlight',
            revert: true,
            cancel: ".disable-item-sorting",
            opacity: 0.5,
            update: function (event, ui) {
                var items = "";
                $("#itemSortable").find(".item-card").each(function () {
                    var itemId = $(this).attr("data-item-id");
                    items = items + "," + itemId;
                });
                $.ajax({
                    url: '@Url.Action("UpdateItem", "Item")',
                    data: { items: items },
                    type: 'POST',
                    success: function (data) {

                    },
                    error: function (xhr, status, error) {

                    }

                });
            }
        });

        $("div[id^='subItemsortable']").sortable({
            opacity: 0.5,
            revert: true,
            cancel: ".disable-sub-item-sorting",
            start: function (event, ui) {
            },
            update: function (event, ui) {
                var items = "";
                $("div[id*='subItemsortable']").find(".sub-item-card").each(function () {
                    var subItemId = $(this).attr("data-sub-item-id");
                    var item = $(this).closest(".item-card");
                    var itemId = "-1";
                    if (item.length > 0) {
                        itemId = item[0].getAttribute("data-item-id")
                    }
                    items = items + "," + subItemId + "|" + itemId;
                });

                $.ajax({
                    url: '@Url.Action("UpdateSubItem", "Item")',
                    data: { items: items },
                    type: 'POST',
                    success: function (data) {

                    },
                    error: function (xhr, status, error) {

                    }
                });

            },
            stop: function (event, ui) {
            },
            receive: function (event, ui) {
            },
            connectWith: ".sortable"
        });

    });
</script>
@if (Model != null)
{
    foreach (var item in Model.Where(x => x.ParentItemID == 0))
    {
        <div class="card item-card" id="item@(item.ID)" data-item-id="@(item.ID)">
            <div class="card-header card-header-primary item-card-header">
                <labe id="descript@(item.ID)">@item.Description</labe>
            </div>
            <div class="edit-sub-item-card">
                <a href="#" class="disable-item-sorting btn btn-primary btn-sm btn-just-icon btn-fill btn-round btn-wd" onclick="AddEditItem(@item.ID,'','@item.Description')">
                    <i class="material-icons">mode_edit</i>
                </a>
            </div>
            <div id="subItemsortable@(item.ID)" class="disable-item-sorting card-body item-card-body sortable">
                @{
                    foreach (var subItem in Model.Where(x => x.ParentItemID == item.ID))
                    {
                        <div class="card sub-item-card" id="child@(subItem.ID)" data-sub-item-id="@(subItem.ID)">
                            <div class="card-body">
                                @subItem.Description
                            </div>
                            <div class="edit-sub-item-card">
                                <a href="#" class="disable-sub-item-sorting btn btn-primary btn-sm btn-just-icon btn-fill btn-round btn-wd" onclick="AddEditItem(@subItem.ID,@item.ID,'@subItem.Description')">
                                    <i class="material-icons">mode_edit</i>
                                </a>
                            </div>
                        </div>
                    }
                }

            </div>
            <div class="disable-item-sorting card-footer item-card-footer" onclick="AddEditItem('',@item.ID,'')">
                <span>+ New sub-item</span>
            </div>
        </div>
    }
}
